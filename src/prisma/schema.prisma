// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Category {
  id           Int     @id @default(autoincrement())
  name         String  @map("category_name")
  thumbnail    String  @map("category_thumbnail")
  primaryColor String  @map("primary_color")
  status       Boolean @db.Bit(1)

  questions Question[]

  selections Selection[]

  @@map("ai_category")
}

model Question {
  id          Int     @id @default(autoincrement())
  name        String  @map("question_name")
  description String  @map("question_description") @db.Text
  questionGPT String  @map("question_gpt") @db.Text
  status      Boolean @default(true) @db.Bit(1)
  type        String @default("")

  category   Category @relation(fields: [categoryId], references: [id])
  categoryId Int      @map("category_id")

  options Option[]

  chatGPTQuestionAnswer ChatGPTQuestionAnswer?

  @@map("ai_question")
}

model Option {
  id          Int      @id @default(autoincrement())
  name        String   @map("option_name")
  description String?  @map("option_description") @db.Text
  type        String @default("")

  question   Question @relation(fields: [questionId], references: [id])
  questionId Int      @map("question_id")

  selectedOptions SelectedOption[]

  @@map("ai_option")
}

model SelectedOption {
  id Int @id @default(autoincrement())

  option   Option @relation(fields: [optionId], references: [id])
  optionId Int    @map("option_id")

  selection   Selection @relation(fields: [selectionId], references: [id])
  selectionId Int       @map("selection_id")

  chatGPTBriefAnswer ChatGPTBriefAnswer?

  @@map("ai_selected_option")
}

model Selection {
  id Int @id @default(autoincrement())

  selectedOptions SelectedOption[]

  category   Category @relation(fields: [categoryId], references: [id])
  categoryId Int      @default(3) @map("category_id")

  @@map("ai_selection")
}

model ChatGPTBriefAnswer {
  id     Int    @id @default(autoincrement())
  answer String @map("chatgpt_answer") @db.LongText

  selectedOption   SelectedOption @relation(fields: [selectedOptionId], references: [id])
  selectedOptionId Int            @unique @map("selected_option_id")

  @@map("chatgpt_answer")
}

model ChatGPTQuestionAnswer {
  id     Int    @id @default(autoincrement())
  answer String @map("chatgpt_question_answer") @db.LongText

  question   Question @relation(fields: [questionId], references: [id])
  questionId Int      @unique @map("chat_question_id_answer")

  @@map("chatgpt_question_answer")
}
