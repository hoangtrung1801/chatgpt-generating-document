// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  password  String
  createdAt DateTime @default(now()) @map("created_at")

  selections Selection[]

  userStories UserStory[]

  @@map("user")
}

model App {
  id        Int     @id @default(autoincrement())
  name      String
  thumbnail String? @db.VarChar(512)
  // primaryColor String? @map("primary_color")
  status    Boolean @default(false) @db.Bit(1)

  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId Int      @map("category_id")

  questions Question[]

  selections Selection[]

  @@map("ai_app")
}

model Category {
  id        Int     @id @default(autoincrement())
  name      String
  thumbnail String? @db.VarChar(512)
  // status    Boolean @default(false) @db.Bit(1)
  status CategoryStatus @default(COMING_SOON)

  apps App[]

  @@map("ai_category")
}

model Question {
  id          Int          @id @default(autoincrement())
  name        String       @map("question_name")
  description String?      @map("question_description") @db.Text
  questionGPT String?      @map("question_gpt") @db.Text
  keyword     String?      @map("question_keyword")
  status      Boolean      @default(true) @db.Bit(1)
  type        QuestionType

  app   App @relation(fields: [appId], references: [id], onDelete: Cascade)
  appId Int @map("app_id")

  options Option[]

  chatGPTQuestionAnswer ChatGPTQuestionAnswer?

  @@map("ai_question")
}

model Option {
  id          Int     @id @default(autoincrement())
  name        String  @map("option_name")
  description String? @map("option_description") @db.Text
  type        String  @default("")

  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId Int      @map("question_id")

  selectedOptions SelectedOption[]

  @@map("ai_option")
}

model SelectedOption {
  id Int @id @default(autoincrement())

  option   Option @relation(fields: [optionId], references: [id], onDelete: Cascade)
  optionId Int    @map("option_id")

  selection   Selection @relation(fields: [selectionId], references: [id], onDelete: Cascade)
  selectionId Int       @map("selection_id")

  @@map("ai_selected_option")
}

model Selection {
  id          Int      @id @default(autoincrement())
  username    String   @db.VarChar(512)
  projectName       String @map("project_name")
  description String?   @db.Text
  createdAt   DateTime @default(now()) @map("created_at")

  selectedOptions SelectedOption[]

  app   App? @relation(fields: [appId], references: [id], onDelete: SetNull)
  appId Int? @default(3) @map("app_id")

  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int  @default(1) @map("user_id")

  userStories UserStory[]

  chatGPTBriefAnswer ChatGPTBriefAnswer?

  sprint Sprint[]

  epic Epic[]

  userFlow Json? @default("{}") @map("user_flow")

  @@map("ai_selection")
}

model UserStory {
  id          Int      @id @default(autoincrement())
  title       String
  description String   @db.Text
  storyPoint  Int      @default(0) @map("story_point")
  createdAt   DateTime @default(now()) @map("created_at")

  status UserStoryStatus @default(IN)

  selection   Selection @relation(fields: [selectionId], references: [id], onDelete: Cascade)
  selectionId Int       @map("selection_id")

  sprint   Sprint? @relation(fields: [sprintId], references: [id], onDelete: Cascade)
  sprintId Int?    @map("sprint_id")

  // remove optional
  epic   Epic? @relation(fields: [epicId], references: [id], onDelete: Cascade)
  epicId Int?  @map("epic_id")

  assignee   User? @relation(fields: [assigneeId], references: [id], onDelete: SetNull)
  assigneeId Int?  @map("assignee_id")

  @@map("ai_user_story")
}

model ChatGPTBriefAnswer {
  id     Int     @id @default(autoincrement())
  answer String  @map("chatgpt_answer") @db.LongText
  prompt String? @map("chatgpt_prompt") @db.LongText

  selection   Selection @relation(fields: [selectionId], references: [id], onDelete: Cascade)
  selectionId Int       @unique @map("selection_id")

  @@map("chatgpt_answer")
}

model ChatGPTQuestionAnswer {
  id     Int    @id @default(autoincrement())
  answer String @map("chatgpt_question_answer") @db.LongText

  question   Question @relation(fields: [questionId], references: [id])
  questionId Int      @unique @map("chat_question_id_answer")

  @@map("chatgpt_question_answer")
}

model Sprint {
  id        Int      @id @default(autoincrement())
  name      String
  startDate DateTime @map("start_date")
  endDate   DateTime @map("end_date")

  selection   Selection @relation(fields: [selectionId], references: [id], onDelete: Cascade)
  selectionId Int       @map("selection_id")

  userStories UserStory[]

  @@map("ai_sprint")
}

model Epic {
  id          Int      @id @default(autoincrement())
  title       String
  description String   @db.Text
  createdAt   DateTime @default(now()) @map("created_at")

  status EpicStatus @default(NOT_STARTED)

  selection   Selection @relation(fields: [selectionId], references: [id], onDelete: Cascade)
  selectionId Int       @map("selection_id")

  userStories UserStory[]

  @@map("ai_epic")
}

enum UserStoryStatus {
  IN
  IN_PROGRESS
  IN_REVIEW
  DONE

  @@map("user_story_status")
}

enum EpicStatus {
  NOT_STARTED
  IN_PROGRESS
  DONE
  ARCHIVED

  @@map("epic_status")
}

enum CategoryStatus {
  COMING_SOON
  LAUNCH
}

enum QuestionType {
  SINGLE
  MULTI
  YESNO

  @@map("question_type")
}
